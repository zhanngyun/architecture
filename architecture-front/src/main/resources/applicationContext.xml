<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
			http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop.xsd ">

    <!-- 第一步：配置DataSource -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close" lazy-init="true">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://47.98.204.145:3306/architecture?useSSL=false"/>
        <property name="username" value="sunCloud"/>
        <property name="password" value="sunCloud"/>
    </bean>
    <!-- 第二步：配置sessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:mapper/**/*Mapper.xml"/>
    </bean>
    <!-- 第三步：配置DAO，这里使用 MapperScannerConfigurer扫描指定规则下的接口，根据Mapper自动生成DAO的实现-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" lazy-init="true">
        <property name="basePackage" value="com.yun"/>
        <property name="annotationClass" value="org.springframework.stereotype.Repository"/>
    </bean>
    <!-- 第四步：配置spring事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 第五步：基于注解的方式使用事务管理 -->
    <tx:annotation-driven transaction-manager="transactionManager"
                          proxy-target-class="true"/>
    <!-- 第六步：AOP代理 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!-- 第七步：spring自动扫描和管理Bean声明 -->
    <context:component-scan base-package="com.yun">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


</beans>